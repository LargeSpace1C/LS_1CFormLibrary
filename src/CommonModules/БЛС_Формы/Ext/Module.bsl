// Библиотека общих функций по работе с формами в программном режиме
// Версия библиотеки: 26.07.2023
//

#Область СлужебныйПрограммныйИнтерфейс

#Область СозданиеРеквизитовФормы

// Добавить реквизит формы с типом таблицы значений. Если реквизит с указанным именем существует - не добавлять
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения	 - Форма, на которую добавляется реквизит
//  МассивРеквизитов - Массив						 - Массив добавляемых реквизитов
//  ТаблицаДанных	 - ТаблицаЗначений				 - Таблица данных, которые должны быть добавлены как реквизит
//  Имя				 - Строка						 - Имя реквизита формы
//  Синоним			 - Строка						 - Синоним реквизита формы. Не обязательно
//
Процедура НовРеквТаблицаЗначений(Форма, МассивРеквизитов, ТаблицаДанных, Имя, Синоним = "") Экспорт
	
	Если ЕстьРеквизитФормы(Форма, Имя) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизит = Новый РеквизитФормы(Имя, Новый ОписаниеТипов("ТаблицаЗначений"), "", Синоним);
	МассивРеквизитов.Добавить(Реквизит);
	Для Каждого Колонка Из ТаблицаДанных.Колонки Цикл
		Реквизит = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, Имя, Колонка.Заголовок);
		МассивРеквизитов.Добавить(Реквизит);
	КонецЦикла;
	
КонецПроцедуры

// Добавить единичный реквизит формы с произвольным типом
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения	 - Форма, на которую добавляется реквизит
//  МассивРеквизитов - Массив						 - Массив новых реквизитов
//  ТипЭлемента		 - Строка, ОписаниеТипов		 - Строка с наименованием типа, описание типов
//  Имя				 - Строка						 - Строка с именем нового реквизита
//  Синоним			 - Строка						 - Строка синонима элемента, не обязательно
//
Процедура НовРеквФормы(Форма, МассивРеквизитов, ТипЭлемента, Имя, Синоним = "") Экспорт
	
	Если ЕстьРеквизитФормы(Форма, Имя) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТипЭлемента) = Тип("Строка") Тогда
		Реквизит = Новый РеквизитФормы(Имя, Новый ОписаниеТипов(ТипЭлемента), "", Синоним);
	Иначе
		Реквизит = Новый РеквизитФормы(Имя, ТипЭлемента, "", Синоним);
	КонецЕсли;
	МассивРеквизитов.Добавить(Реквизит);
		
КонецПроцедуры

// Добавить реквизит существующей табличной части формы
//
// Параметры:
//  МассивРеквизитов - Массив			 - Массив новых реквизитов
//  ТипЭлемента		 - Строка, ОписаниеТипов - Строка с наименованием типа
//  ПутьКРодителю	 - Строка				 - Путь к родителю, например "Объект.Запасы"
//  Имя				 - Строка				 - Строка с именем нового реквизита
//  Синоним			 - Строка				 - Строка синонима элемента. Не обязательно
//
Процедура НовРеквТЧФормы(МассивРеквизитов, ТипЭлемента, ПутьКРодителю, Имя, Синоним = "") Экспорт
	
	Если ТипЗнч(ТипЭлемента) = Тип("Строка") Тогда
		Реквизит = Новый РеквизитФормы(Имя, Новый ОписаниеТипов(ТипЭлемента), ПутьКРодителю, Синоним);
	Иначе
		Реквизит = Новый РеквизитФормы(Имя, ТипЭлемента, ПутьКРодителю, Синоним);
	КонецЕсли;
	МассивРеквизитов.Добавить(Реквизит);
		
КонецПроцедуры


#КонецОбласти


#Область ДобавлениеЭлементовФормы

#Область ДобавлениеПолей

// Добавить элемент формы с видом "Поле флажка"
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения	 - Форма, на которую добавляется элемент
//  Родитель				 - ГруппаФормы					 - Группа или другой родитель, к которому принадлежит элемент 
//  Имя						 - Строка						 - Имя элемента формы. Если уже существует элемент с таким именем - он не добавляется
//  Синоним					 - Строка						 - Синоним элемента. Не обязательно// 
// Возвращаемое значение:
//  ДекорацияФормы - Добавленный элемент формы
//
Функция ДобДекорацию(Форма, Родитель, Имя, Синоним) Экспорт
	
	ЭлементФормы = Форма.Элементы.Найти(Имя);
	Если ЭлементФормы = Неопределено Тогда
		ЭлементФормы = Форма.Элементы.Добавить(Имя, Тип("ДекорацияФормы"), Родитель);
		ЭлементФормы.Заголовок = Синоним;
	КонецЕсли;
	Возврат ЭлементФормы;
	
КонецФункции


// Добавить элемент формы с видом "Поле флажка"
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения	 - Форма, на которую добавляется элемент
//  Родитель				 - ГруппаФормы					 - Группа или другой родитель, к которому принадлежит элемент 
//  Имя						 - Строка						 - Имя элемента формы. Если уже существует элемент с таким именем - он не добавляется
//  Синоним					 - Строка						 - Синоним элемента. Не обязательно
//  РеквизитОбъекта			 - Булево						 - Признак того, что выводим реквизит объекта. По умолчанию - ложь
//  ПутьКДанным				 - Строка						 - Нестандартный путь к данным. Используется если РеквизитОбъекта = Ложь
//  ОбработчикПриИзменении	 - Строка						 - Наименование функции обработчика. Можно переопределить
// 
// Возвращаемое значение:
//  ЭлементФормы - Добавленный элемент формы
//
Функция ДобФлаг(Форма, Родитель = Неопределено, Имя, Синоним = "", РеквизитОбъекта = Ложь, ПутьКДанным = "",  ОбработчикПриИзменении = "ЛС_ОбработчикПриИзменении") Экспорт
	
	ПолеЭлемента = Форма.Элементы.Найти(Имя);
	Если ПолеЭлемента = Неопределено Тогда
		
		ПолеЭлемента = Форма.Элементы.Добавить(Имя, Тип("ПолеФормы"), Родитель);	
		ПолеЭлемента.Вид = ВидПоляФормы.ПолеФлажка;
		ПолеЭлемента.ПутьКДанным = ?(РеквизитОбъекта, "Объект." + Имя, ?(ПустаяСтрока(ПутьКДанным), Имя, ПутьКДанным));	
		ПолеЭлемента.УстановитьДействие("ПриИзменении", ОбработчикПриИзменении);
		ПолеЭлемента.Заголовок = Синоним;
		
	КонецЕсли;
	Возврат ПолеЭлемента;
	
КонецФункции

// Добавить элемент формы с видом "Поле ввода"
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения	 - Форма, на которую добавляется элемент
//  Родитель				 - ГруппаФормы					 - Группа или другой родитель, к которому принадлежит элемент 
//  Имя						 - Строка						 - Имя элемента формы. Если уже существует элемент с таким именем - он не добавляется
//  Синоним					 - Строка						 - Синоним элемента. Не обязательно
//  РеквизитОбъекта			 - Булево						 - Признак того, что выводим реквизит объекта. По умолчанию - ложь
//  ПутьКДанным				 - Строка						 - Нестандартный путь к данным. Используется если РеквизитОбъекта = Ложь
//  ОбработчикПриИзменении	 - Строка						 - Наименование функции обработчика. Можно переопределить
// 
// Возвращаемое значение:
//  ЭлементФормы - Добавленный элемент формы
//
Функция ДобПолеВвода(Форма, Родитель = Неопределено, Имя, Синоним = "", РеквизитОбъекта = Ложь, ПутьКДанным = "", ОбработчикПриИзменении = "ЛС_ОбработчикПриИзменении") Экспорт
	
	ПолеЭлемента = Форма.Элементы.Найти(Имя);
	Если ПолеЭлемента = Неопределено Тогда	
		ПолеЭлемента = Форма.Элементы.Добавить(Имя, Тип("ПолеФормы"), Родитель);	
		ПолеЭлемента.Вид = ВидПоляФормы.ПолеВвода;
		ПолеЭлемента.ПутьКДанным = ?(РеквизитОбъекта, "Объект." + Имя, ?(ПустаяСтрока(ПутьКДанным), Имя, ПутьКДанным));		
	КонецЕсли;
	ПолеЭлемента.УстановитьДействие("ПриИзменении", ОбработчикПриИзменении);
	ПолеЭлемента.Заголовок = Синоним;
		
	Возврат ПолеЭлемента;
	
КонецФункции

// Добавить элемент формы с видом "Гиперссылка"
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения	 - Форма, на которую добавляется элемент
//  Родитель				 - ГруппаФормы					 - Группа или другой родитель, к которому принадлежит элемент 
//  Имя						 - Строка						 - Имя элемента формы. Если уже существует элемент с таким именем - он не добавляется
//  Синоним					 - Строка						 - Синоним элемента. Не обязательно
//  РеквизитОбъекта			 - Булево						 - Признак того, что выводим реквизит объекта. По умолчанию - ложь
//  ПутьКДанным				 - Строка						 - Нестандартный путь к данным. Используется если РеквизитОбъекта = Ложь
//  ОбработчикПриИзменении	 - Строка						 - Наименование функции обработчика. Можно переопределить
// 
// Возвращаемое значение:
//  ЭлементФормы - Добавленный элемент формы
//
Функция ДобПолеГиперссылки(Форма, Родитель = Неопределено, Имя, Синоним = "", РеквизитОбъекта = Ложь, ПутьКДанным = "", ОбработчикНажатие = "ЛС_Нажатие") Экспорт
	
	ПолеЭлемента = Форма.Элементы.Найти(Имя);
	Если ПолеЭлемента = Неопределено Тогда
		
		ПолеЭлемента = Форма.Элементы.Добавить(Имя, Тип("ПолеФормы"), Родитель);	
		ПолеЭлемента.Вид = ВидПоляФормы.ПолеНадписи;
		ПолеЭлемента.Гиперссылка = Истина;
		ПолеЭлемента.ПутьКДанным = ?(РеквизитОбъекта, "Объект." + Имя, ?(ПустаяСтрока(ПутьКДанным), Имя, ПутьКДанным));	
		ПолеЭлемента.УстановитьДействие("Нажатие", ОбработчикНажатие);
		ПолеЭлемента.Заголовок = Синоним;
		
	КонецЕсли;
	Возврат ПолеЭлемента;
	
КонецФункции

#КонецОбласти

#Область ДобавлениеГруппИКомандныхПанелей

// Добавить группу формы с видом "Страница"
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - Форма, на которую добавляется элемент
//  Родитель - ГруппаФормы					 - Группа или другой родитель, к которому принадлежит элемент
//  Имя		 - Строка						 - Имя элемента формы. Если уже существует элемент с таким именем - он не добавляется
//  Синоним	 - Строка						 - Синоним элемента. Не обязательно
// 
// Возвращаемое значение:
//  СтраницыФормы - Добавленная группа страниц формы
//
Функция ДобСтраницы(Форма, Родитель = Неопределено, Имя, Синоним) Экспорт
	
	ГруппаФормы = Форма.Элементы.Найти(Имя);
	Если ГруппаФормы = Неопределено Тогда
		ГруппаФормы = Форма.Элементы.Добавить(Имя, Тип("ГруппаФормы"), Родитель);
		ГруппаФормы.Вид = ВидГруппыФормы.Страницы;
		ГруппаФормы.Заголовок = Синоним;
	КонецЕсли;
	Возврат ГруппаФормы;	
	
КонецФункции

// Добавить группу формы с видом "Страница"
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - Форма, на которую добавляется элемент
//  Родитель - ГруппаФормы					 - Группа или другой родитель, к которому принадлежит элемент
//  Имя		 - Строка						 - Имя элемента формы. Если уже существует элемент с таким именем - он не добавляется
//  Синоним	 - Строка						 - Синоним элемента. Не обязательно
// 
// Возвращаемое значение:
//  ГруппаФормы - Добавленная страница формы
//
Функция ДобСтраницу(Форма, Родитель = Неопределено, Имя, Синоним) Экспорт
	
	СтраницаФормы = Форма.Элементы.Найти(Имя);
	Если СтраницаФормы = Неопределено Тогда
		
		СтраницаФормы = Форма.Элементы.Добавить(Имя, Тип("ГруппаФормы"), Родитель);
		СтраницаФормы.Вид = ВидГруппыФормы.Страница;
		СтраницаФормы.Заголовок = Синоним;
		
	КонецЕсли;
	Возврат СтраницаФормы;
	
КонецФункции

// Добавить группу формы с видом "группа"
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - Форма, на которую добавляется элемент
//  Родитель - ГруппаФормы					 - Группа или другой родитель, к которому принадлежит элемент
//  Имя		 - Строка						 - Имя элемента формы. Если уже существует элемент с таким именем - он не добавляется
//  Синоним	 - Строка						 - Синоним элемента. Не обязательно. Если не указано - заголовок не отображается
// 
// Возвращаемое значение:
//  ГруппаФормы - Добавленная группа формы
//
Функция ДобГруппу(Форма, Родитель = Неопределено, Имя, Синоним = "") Экспорт
	
	ГруппаФормы = Форма.Элементы.Найти(Имя);
	Если ГруппаФормы = Неопределено Тогда
		
		ГруппаФормы = Форма.Элементы.Добавить(Имя, Тип("ГруппаФормы"), Родитель);
		ГруппаФормы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаФормы.Заголовок = Синоним;
		Если Синоним = "" Тогда
			ГруппаФормы.ОтображатьЗаголовок = Ложь;
		КонецЕсли;

	КонецЕсли;
	Возврат ГруппаФормы;
	
КонецФункции

// Добавить группу командной панели с видом "группа кнопок"
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - Форма, на которую добавляется элемент
//  Родитель - КоманднаяПанель				 - Командная панель, к которому принадлежит элемент
//  Имя		 - Строка						 - Имя элемента формы. Если уже существует элемент с таким именем - он не добавляется
//  Синоним	 - Строка						 - Синоним элемента. Не обязательно. Если не указано - заголовок не отображается
// 
// Возвращаемое значение:
//  ГруппаФормы - Добавленная группа формы
//
Функция ДобГруппуКнопок(Форма, Родитель = Неопределено, Имя, Синоним = "") Экспорт
	
	ГруппаФормы = Форма.Элементы.Найти(Имя);
	Если ГруппаФормы = Неопределено Тогда
		
		ГруппаФормы = Форма.Элементы.Добавить(Имя, Тип("ГруппаФормы"), Родитель);
		ГруппаФормы.Вид = ВидГруппыФормы.ГруппаКнопок;
		ГруппаФормы.Заголовок = Синоним;
		Если Синоним = "" Тогда
			ГруппаФормы.ОтображатьЗаголовок = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	Возврат ГруппаФормы;
	
КонецФункции

// Добавить командную панель
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - Форма, на которую добавляется элемент
//  Родитель - ГруппаФормы					 - Группа формы, к которой принадлежит элемент
//  Имя		 - Строка						 - Имя элемента формы. Если уже существует элемент с таким именем - он не добавляется
// 
// Возвращаемое значение:
//  КоманднаяПанельФормы - Добавленная командная панель формы
//
Функция ДобКомПанель(Форма, Родитель = Неопределено, Имя) Экспорт
	
	ГруппаФормы = Форма.Элементы.Найти(Имя);
	Если ГруппаФормы = Неопределено Тогда
		ГруппаФормы = Форма.Элементы.Добавить(Имя, Тип("ГруппаФормы"), Родитель);
		ГруппаФормы.Вид = ВидГруппыФормы.КоманднаяПанель;
		ГруппаФормы.Заголовок = "";
	КонецЕсли;
	Возврат ГруппаФормы;	
	
КонецФункции

// Добавить группу командной панели с видом "подменю кнопок"
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - Форма, на которую добавляется элемент
//  Родитель - КоманднаяПанель				 - Командная панель, к которому принадлежит элемент
//  Имя		 - Строка						 - Имя элемента формы. Если уже существует элемент с таким именем - он не добавляется
//  Синоним	 - Строка						 - Синоним элемента. Не обязательно. Если не указано - заголовок не отображается
// 
// Возвращаемое значение:
//  ГруппаФормы - Добавленная группа формы
//
Функция ДобПодменюКП(Форма, Родитель, Имя, Синоним) Экспорт
	
	ЭлементПодменю = Форма.Элементы.Добавить(Имя, Тип("ГруппаФормы"), Родитель); 
	ЭлементПодменю.Вид = ВидГруппыФормы.Подменю;
	ЭлементПодменю.Заголовок = Синоним;
	Возврат ЭлементПодменю;
	
КонецФункции

#КонецОбласти

#Область ДобавлениеТаблицыИКолонок

// Добавить таблицу формы в элементы
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения	 - Форма, на которую добавляется элемент
//  Родитель		 - ГруппаФормы					 - Группа формы, к которому принадлежит элемент
//  Имя				 - Строка						 - Имя элемента формы. Если уже существует элемент с таким именем - он не добавляется
//  РеквизитОбъекта	 - Булево						 - Признак того, что выводим реквизит объекта. По умолчанию - ложь
//  ТаблицаДанных	 - ТаблицаЗначений				 - Таблица данных, являющаяся прототипом для добавления на форму элементов
// 
// Возвращаемое значение:
//  ТаблицаФормы - Добавленная таблица формы
//
Функция ДобТаблицу(Форма, 
				   Родитель, 
				   Имя, 
				   РеквизитОбъекта, 
				   Знач ТаблицаДанных = Неопределено) Экспорт
	
	ТаблицаФормы = Форма.Элементы.Найти(Имя);
	Если ТаблицаФормы <> Неопределено Тогда
		Возврат ТаблицаФормы;
	КонецЕсли;
		
	ТаблицаФормы = Форма.Элементы.Добавить(Имя, Тип("ТаблицаФормы"), Родитель);	
	ТаблицаФормы.ПутьКДанным = ?(РеквизитОбъекта, "Объект." + Имя, Имя);
	ТаблицаФормы.Отображение = ОтображениеТаблицы.Список;
	ТаблицаФормы.АвтоМаксимальнаяШирина = Ложь;
	
	ТаблицаДанных = ПолучитьТаблицуДанных(Форма, Имя, РеквизитОбъекта, ТаблицаДанных); 
	Если ТипЗнч(ТаблицаДанных) <> Тип("ТаблицаЗначений") Тогда  
		Возврат ТаблицаФормы;
	КонецЕсли;
	
	Для Каждого Колонка Из ТаблицаДанных.Колонки Цикл
		
		Если Колонка.Имя = "ИсходныйНомерСтроки" Тогда
			Продолжить;
		КонецЕсли;
		НовыйЭлемент = Форма.Элементы.Добавить(Имя + Колонка.Имя, Тип("ПолеФормы"), ТаблицаФормы);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = ?(РеквизитОбъекта, "Объект." + Имя, Имя) + "." + Колонка.Имя;	
		
	КонецЦикла;
	
	
	Возврат ТаблицаФормы;
	
КонецФункции

// Добавить группу командной панели с видом "группа колонок"
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения	 - Форма, на которую добавляется элемент
//  Родитель				 - ТаблицаФормы					 - Таблица, к которой принадлежит элемент
//  Имя						 - Строка						 - Имя группы формы. Если уже существует элемент с таким именем - он не добавляется
//  Синоним					 - Строка						 - Синоним группы. Не обязательно. Если не указано - заголовок не отображается
//  ОбработчикПриИзменении	 - Строка						 - Наименование функции обработчика. Можно переопределить
// 
// Возвращаемое значение:
//  ПолеФормы - Добавленная колонка в таблице формы
//
Функция ДобГруппуКолонокТаблицы(Форма, Родитель = Неопределено, Имя, Синоним = "") Экспорт
	
	ГруппаФормы = Форма.Элементы.Найти(Имя);
	Если ГруппаФормы = Неопределено Тогда
		ГруппаФормы = Форма.Элементы.Добавить(Имя, Тип("ГруппаФормы"), Родитель);
		ГруппаФормы.Вид = ВидГруппыФормы.ГруппаКолонок;
		ГруппаФормы.Заголовок = Синоним;
		Если Синоним = "" Тогда
			ГруппаФормы.ОтображатьЗаголовок = Ложь;	
		КонецЕсли;
	КонецЕсли;
	Возврат ГруппаФормы;
	
КонецФункции

// Добавить группу командной панели с видом "группа кнопок"
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения	 - Форма, на которую добавляется элемент
//  Родитель				 - ТаблицаФормы					 - Таблица, к которой принадлежит элемент
//  Имя						 - Строка						 - Имя элемента формы. Если уже существует элемент с таким именем - он не добавляется
//  Синоним					 - Строка						 - Синоним элемента. Не обязательно. 
//  ОбработчикПриИзменении	 - Строка						 - Наименование функции обработчика. Можно переопределить
// 
// Возвращаемое значение:
//  ПолеФормы - Добавленная колонка в таблице формы
//
Функция ДобКолонкуТаблицы(Форма, Родитель, Имя, Синоним, Знач ПутьКДанным = "", ОбработчикПриИзменении = "ЛС_ОбработчикПриИзменении") Экспорт
	
	ПолеЭлемента = Форма.Элементы.Найти(Родитель.Имя + Имя);
	Если ПутьКДанным = "" Тогда
		ПутьКДанным = Родитель.ПутьКДанным;
	КонецЕсли;
	Если ПолеЭлемента = Неопределено Тогда
		ПолеЭлемента = Форма.Элементы.Добавить(Родитель.Имя + Имя, Тип("ПолеФормы"), Родитель );	
		ПолеЭлемента.Вид = ВидПоляФормы.ПолеВвода;
		ПолеЭлемента.ПутьКДанным = ПутьКДанным + "." + Имя;
		ПолеЭлемента.Заголовок = Синоним;
		ПолеЭлемента.УстановитьДействие("ПриИзменении", ОбработчикПриИзменении);
	КонецЕсли;
	Возврат ПолеЭлемента;
	
КонецФункции

// Добавить динамический список
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения	 - Форма, на которую добавляется элемент
//  Родитель			 - ГруппаФормы					 - Группа или другой родитель, к которому принадлежит элемент
//  Имя					 - Строка						 - Имя элемента формы. Если уже существует элемент с таким именем - он не добавляется
//  ТекстЗапроса		 - Строка						 - Текст запроса динамического списка
//  ТаблицаСписка		 - ТаблицаЗначений				 - Таблица с описанием колонок динамического списка
//  ИмяОсновнойТаблицы	 - Строка						 - Имя основной таблицы динамического списка
// 
// Возвращаемое значение:
//  ТаблицаФормы - Таблица формы, которая ссылается на динамический список
//
Функция ДобДинамСписок(Форма, Родитель, Имя, ТекстЗапроса, ТаблицаСписка, ИмяОсновнойТаблицы = "") Экспорт
	
	РеквизитДС = Форма[Имя];
	РеквизитДС.ПроизвольныйЗапрос = Истина;
	РеквизитДС.ТекстЗапроса = ТекстЗапроса;
	РеквизитДС.ОсновнаяТаблица = ИмяОсновнойТаблицы; 
	
	Таблица = ДобТаблицу(Форма, Родитель, Имя, Ложь, ТаблицаСписка); 
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область ДобавлениеКнопок

// Добавить кнопку
//
// Параметры:
//  Форма		 - ФормаКлиентскогоПриложения	 - Форма, на которую добавляется элемент
//  Родитель	 - ГруппаФормы					 - Группа или другой родитель, к которому принадлежит элемент
//  Имя			 - Строка						 - Имя команды формы.
//  Синоним		 - Строка						 - Синоним команды и кнопки формы
//  ИмяДействия	 - Строка						 - Путь к обработчику на форме
// 
// Возвращаемое значение:
//  КнопкаФормы - Кнопка формы
//
Функция ДобКнопку(Форма, Родитель = Неопределено, Имя, Синоним, ИмяДействия = "ЛС_ОбработчикКоманды") Экспорт
	
	КомандаКнопки = Форма.Команды.Найти(Имя);
	Если КомандаКнопки = Неопределено Тогда
		КомандаКнопки = Форма.Команды.Добавить(Имя);
	КонецЕсли;
	КомандаКнопки.Действие = ИмяДействия;
	КомандаКнопки.Заголовок = Синоним;
	
	ЭлементКнопки = Форма.Элементы.Найти(Имя);
	Если ЭлементКнопки = Неопределено Тогда
		ЭлементКнопки = Форма.Элементы.Добавить(Имя, Тип("КнопкаФормы"), Родитель);
	КонецЕсли;
	ЭлементКнопки.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	ЭлементКнопки.ИмяКоманды = Имя;
	Возврат ЭлементКнопки;
	
КонецФункции

// Добавить кнопку командной панели
//
// Параметры:
//  Форма		 - ФормаКлиентскогоПриложения	 - Форма, на которую добавляется элемент
//  Родитель	 - ГруппаФормы					 - Группа или другой родитель, к которому принадлежит элемент
//  Имя			 - Строка						 - Имя команды формы.
//  Синоним		 - Строка						 - Синоним команды и кнопки формы
//  ИмяДействия	 - Строка						 - Путь к обработчику на форме
// 
// Возвращаемое значение:
//  КнопкаФормы - Кнопка формы
//
Функция ДобКнопкуКП(Форма, Родитель, Имя, Синоним, ИмяДействия = "ЛС_ОбработчикКоманды") Экспорт
	
	КомандаКнопки = Форма.Команды.Найти(Имя);
	Если КомандаКнопки = Неопределено Тогда
		КомандаКнопки =   Форма.Команды.Добавить(Имя);
	КонецЕсли;
	КомандаКнопки.Действие = ИмяДействия;
	КомандаКнопки.Заголовок = Синоним;
	ЭлементКнопки = Форма.Элементы.Найти(Имя);
	Если ЭлементКнопки = Неопределено Тогда
		ЭлементКнопки = Форма.Элементы.Добавить(Имя, Тип("КнопкаФормы"), Родитель);
	КонецЕсли;
	ЭлементКнопки.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	ЭлементКнопки.ИмяКоманды = Имя;
	Возврат ЭлементКнопки;
	
КонецФункции

Функция ДобКнопкуКонтМеню(Форма, Родитель, Имя, Синоним, ИмяДействия = "ЛС_ОбработчикКоманды") Экспорт
	
	КомандаКнопки = Форма.Команды.Найти(Имя);
	Если КомандаКнопки = Неопределено Тогда
		КомандаКнопки = Форма.Команды.Добавить(Имя);
	КонецЕсли;
	КомандаКнопки.Действие = ИмяДействия;
	КомандаКнопки.Заголовок = Синоним;
	
	КонтекстноеМеню = Родитель.КонтекстноеМеню;
	ЭлементКнопки = Форма.Элементы.Найти(Имя);
	Если ЭлементКнопки = Неопределено Тогда
		ЭлементКнопки = Форма.Элементы.Добавить(Имя, Тип("КнопкаФормы"), КонтекстноеМеню); 
	КонецЕсли;
	ЭлементКнопки.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	ЭлементКнопки.ИмяКоманды = Имя;
	Возврат ЭлементКнопки;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область ВставкаПеремещениеЭлементовФормы


// Переместить элемент в другое место на форме
//
// Параметры:
//  Форма		 - ФормаКлиентскогоПриложения	 - Форма, в которой перемещается элемент
//  Имя			 - Строка						 - Имя элемента формы. Если уже существует элемент с таким именем - он не добавляется
//  Родитель	 - ГруппаФормы					 - Группа формы, к которому принадлежит элемент
//  СледЭлемент	 - ЭлементФормы					 - Элементы формы, перед которым разместить текущий
//
Процедура ПеремЭлемент(Форма, Имя, Родитель, СледЭлемент = Неопределено) Экспорт
	
	ЭлементФормы = Форма.Элементы.Найти(Имя);
	Если ЭлементФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(СледЭлемент) = Тип("Строка") Тогда
		СледЭлемент = Форма.Элементы.Найти(СледЭлемент);
	КонецЕсли;

	Форма.Элементы.Переместить(ЭлементФормы, Родитель, СледЭлемент);
	
КонецПроцедуры

Функция ВстПолеВвода(Форма, Родитель, Имя, Синоним, Знач СледЭлемент, РеквизитОбъекта = Ложь, ПутьКДанным = "", ОбработчикПриИзменении = "ЛС_ОбработчикПриИзменении") Экспорт
	
	ПолеВвода = Форма.Элементы.Найти(Имя);
	Если ТипЗнч(СледЭлемент) = Тип("Строка") Тогда
		СледЭлемент = Форма.Элементы.Найти(СледЭлемент);
	КонецЕсли;

	Если ПолеВвода = Неопределено Тогда
		ПолеВвода = Форма.Элементы.Вставить(Имя, Тип("ПолеФормы"), Родитель, СледЭлемент);	
		ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
		ПолеВвода.ПутьКДанным = ?(РеквизитОбъекта, "Объект." + Имя, ?(ПустаяСтрока(ПутьКДанным), Имя, ПутьКДанным));	
		ПолеВвода.УстановитьДействие("ПриИзменении", ОбработчикПриИзменении);
		ПолеВвода.Заголовок = Синоним;
	КонецЕсли;
	Возврат ПолеВвода;
	
КонецФункции	

Функция ВстПереключатель(Форма, Родитель, Имя, Синоним, СписокВыбора, Знач СледЭлемент, РеквизитОбъекта = Ложь, ПутьКДанным = "", ОбработчикПриИзменении = "ЛС_ОбработчикПриИзменении") Экспорт

	ЭлементФормы = ВстПолеВвода(Форма, Родитель, Имя, Синоним, СледЭлемент, РеквизитОбъекта, ПутьКДанным, ОбработчикПриИзменении);
	ЭлементФормы.Вид = ВидПоляФормы.ПолеПереключателя; 
	Для Каждого ЭлементСписка Из СписокВыбора Цикл
		ЭлементФормы.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	Возврат ЭлементФормы;
	
КонецФункции

Функция ВстКолонкуТаблицы(Форма, Родитель, Имя, Синоним, Знач СледЭлемент, ПутьКДанным = "", ОбработчикПриИзменении = "ЛС_ОбработчикПриИзменении") Экспорт
	
	Если ТипЗнч(СледЭлемент) = Тип("Строка") Тогда
		СледЭлемент = Форма.Элементы.Найти(СледЭлемент);
	КонецЕсли; 
	ПолеКолонки = Форма.Элементы.Найти(Родитель.Имя + Имя);
	Если ПолеКолонки = Неопределено Тогда
		ПолеКолонки = Форма.Элементы.Вставить(Родитель.Имя + Имя, Тип("ПолеФормы"), Родитель, СледЭлемент );
		ПолеКолонки.Вид = ВидПоляФормы.ПолеВвода;
		ПолеКолонки.ПутьКДанным = ?(ПустаяСтрока(ПутьКДанным), Родитель.ПутьКДанным + "." + Имя, ПутьКДанным);
	КонецЕсли;
	ПолеКолонки.Заголовок = Синоним;
	ПолеКолонки.УстановитьДействие("ПриИзменении", ОбработчикПриИзменении);
	Возврат ПолеКолонки;
	
КонецФункции

Функция ВстГруппу(Форма, Родитель = Неопределено, Имя, Синоним, Знач СледЭлемент) Экспорт
	
	Если ТипЗнч(СледЭлемент) = Тип("Строка") Тогда
		СледЭлемент = Форма.Элементы.Найти(СледЭлемент);
	КонецЕсли;
	ГруппаФормы = Форма.Элементы.Найти(Имя);
	Если ГруппаФормы = Неопределено Тогда
		ГруппаФормы = Форма.Элементы.Вставить(Имя, Тип("ГруппаФормы"), Родитель, СледЭлемент);
		ГруппаФормы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаФормы.Заголовок = Синоним;
	КонецЕсли;
	Возврат ГруппаФормы;	
	
КонецФункции 

Функция ВстГруппуКолонок(Форма, Родитель = Неопределено, Имя, Синоним, Знач СледЭлемент) Экспорт
	
	Если ТипЗнч(СледЭлемент) = Тип("Строка") Тогда
		СледЭлемент = Форма.Элементы.Найти(СледЭлемент);
	КонецЕсли;
	ГруппаФормы = Форма.Элементы.Найти(Имя);
	Если ГруппаФормы = Неопределено Тогда
		ГруппаФормы = Форма.Элементы.Вставить(Имя, Тип("ГруппаФормы"), Родитель, СледЭлемент);
		ГруппаФормы.Вид = ВидГруппыФормы.ГруппаКолонок;
		ГруппаФормы.Заголовок = Синоним;
	КонецЕсли;  
	Если ЗначениеЗаполнено(Синоним) Тогда
		ГруппаФормы.ОтображатьВШапке = Истина;
	КонецЕсли;
	Возврат ГруппаФормы;	
	
КонецФункции 

Функция ВстПодменюКомПанели(Форма, Родитель, Имя, Синоним, Знач СледЭлемент) Экспорт
	
	Если ТипЗнч(СледЭлемент) = Тип("Строка") Тогда
		СледЭлемент = Форма.Элементы.Найти(СледЭлемент);
	КонецЕсли;

	ЭлементПодменю = Форма.Элементы.Найти(Имя);
	Если ЭлементПодменю = Неопределено Тогда	
		ЭлементПодменю = Форма.Элементы.Вставить(Имя, Тип("ГруппаФормы"), Родитель, СледЭлемент);
		ЭлементПодменю.Вид = ВидГруппыФормы.Подменю;
		ЭлементПодменю.Заголовок = Синоним;
	КонецЕсли;
	Возврат ЭлементПодменю;
	
КонецФункции

Функция ВстСтраницу(Форма, Родитель, Имя, Синоним, Знач СледЭлемент) Экспорт
	
	Если ТипЗнч(СледЭлемент) = Тип("Строка") Тогда
		СледЭлемент = Форма.Элементы.Найти(СледЭлемент);
	КонецЕсли;

	СтраницаФормы = Форма.Элементы.Найти(Имя);
	Если СтраницаФормы = Неопределено Тогда
		СтраницаФормы = Форма.Элементы.Вставить(Имя, Тип("ГруппаФормы"), Родитель, СледЭлемент);
		СтраницаФормы.Вид = ВидГруппыФормы.Страница;
		СтраницаФормы.Заголовок = Синоним;
	КонецЕсли;
	Возврат СтраницаФормы;
	
КонецФункции

// Вставить таблицу на форме
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения	 - Форма, на которую добавляется элемент
//  Родитель		 - ГруппаФормы					 - Группа формы, к которому принадлежит элемент
//  Имя				 - Строка						 - Имя элемента формы. Если уже существует элемент с таким именем - он не добавляется
//  РеквизитОбъекта	 - Булево						 - Признак того, что выводим реквизит объекта. По умолчанию - ложь
//  СледЭлемент		 - Строка, ЭлементФормы	 		 - Элемент формы или строка имени элемента, который будет идти следующим
//  ТаблицаДанных	 - ТаблицаЗначений				 - Таблица данных, являющаяся прототипом для добавления на форму элементов
// 
// Возвращаемое значение:
// ТаблицаФормы  - Таблица формы 
//
Функция ВстТаблицуФормы(Форма, 
						Родитель, 
						Имя, 
						РеквизитОбъекта, 
						Знач СледЭлемент, 
						Знач ТаблицаДанных = Неопределено) Экспорт
	
	Если ТипЗнч(СледЭлемент) = Тип("Строка") Тогда
		СледЭлемент = Форма.Элементы.Найти(СледЭлемент);
	КонецЕсли;

	ТаблицаФормы = Форма.Элементы.Найти(Имя);
	Если ТаблицаФормы <> Неопределено Тогда
		Возврат ТаблицаФормы;
	КонецЕсли;
	
	ТаблицаФормы = Форма.Элементы.Вставить(Имя, Тип("ТаблицаФормы"), Родитель, СледЭлемент);	
	ТаблицаФормы.ПутьКДанным = ?(РеквизитОбъекта, "Объект." + Имя, Имя);
	ТаблицаФормы.Отображение = ОтображениеТаблицы.Список;
	ТаблицаФормы.АвтоМаксимальнаяШирина = Ложь;
	
	ТаблицаДанных = ПолучитьТаблицуДанных(Форма, Имя, РеквизитОбъекта, ТаблицаДанных); 
	
	Если ТипЗнч(ТаблицаДанных) <> Тип("ТаблицаЗначений") Тогда
		Возврат ТаблицаФормы;
	КонецЕсли;
	
	Для Каждого Колонка Из ТаблицаДанных.Колонки Цикл
		Если Колонка.Имя = "ИсходныйНомерСтроки" Тогда
			Продолжить;
		КонецЕсли;
		НовыйЭлемент = Форма.Элементы.Добавить(Имя + Колонка.Имя, Тип("ПолеФормы"), ТаблицаФормы);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = ?(РеквизитОбъекта, "Объект." + Имя, Имя) + "." + Колонка.Имя;	
	КонецЦикла;
	
	Возврат ТаблицаФормы;
	
КонецФункции

Функция ВстНадписьКолонкиТаблицы(Форма, Родитель, Имя, Синоним, Знач СледЭлемент, ПутьКДанным = "") Экспорт
	
	Если ТипЗнч(СледЭлемент) = Тип("Строка") Тогда
		СледЭлемент = Форма.Элементы.Найти(СледЭлемент);
	КонецЕсли;

	ПолеКолонки = Форма.Элементы.Вставить(Родитель.Имя + Имя, Тип("ПолеФормы"), Родитель, СледЭлемент );	
	ПолеКолонки.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеКолонки.Гиперссылка = Истина;
	ПолеКолонки.ГиперссылкаЯчейки = Истина;
	ПолеКолонки.ПутьКДанным = ?(ПустаяСтрока(ПутьКДанным), Родитель.ПутьКДанным + "." + Имя, ПутьКДанным);
	ПолеКолонки.Заголовок = Синоним;
	Возврат ПолеКолонки;
	
КонецФункции

// Вставить элемент формы с видом "декорация"
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - Форма, на которую добавляется элемент
//  Родитель - ГруппаФормы					 - Группа или другой родитель, к которому принадлежит элемент
//  Имя		 - Строка						 - Имя элемента формы. Если уже существует элемент с таким именем - он не добавляется
//  Синоним	 - Строка						 - Синоним элемента. Не обязательно//
//  СледЭлемент - Строка,ЭлементФормы		 - Элемент формы или его название на форме
// Возвращаемое значение:
//  ДекорацияФормы - Добавленный элемент формы
//
Функция ВстДекорацию(Форма, Родитель, Имя, Синоним, Знач СледЭлемент) Экспорт

	ЭлементФормы = Форма.Элементы.Найти(Имя);
	Если ТипЗнч(СледЭлемент) = Тип("Строка") Тогда
		СледЭлемент = Форма.Элементы.Найти(СледЭлемент);
	КонецЕсли;
	Если ЭлементФормы = Неопределено Тогда
		ЭлементФормы = Форма.Элементы.Вставить(Имя, Тип("ДекорацияФормы"), Родитель, СледЭлемент);
		ЭлементФормы.Заголовок = Синоним;
	КонецЕсли;
	Возврат ЭлементФормы;
	
КонецФункции

Функция ВстКнопку(Форма, Родитель, ИмяЭлемента, СинонимЭлемента, ИмяПоследующегоЭлемента) Экспорт

	КомандаКнопки = Форма.Команды.Добавить(ИмяЭлемента);
	КомандаКнопки.Действие = "ЛС_ОбработчикКоманды";
	КомандаКнопки.Заголовок = СинонимЭлемента;
	
	ПоследующийЭлемент = Форма.Элементы.Найти(ИмяПоследующегоЭлемента);
	Если ПоследующийЭлемент <> Неопределено Тогда
		ЭлементКнопки = Форма.Элементы.Вставить(ИмяЭлемента, Тип("КнопкаФормы"), Родитель, ПоследующийЭлемент);
	Иначе
		ЭлементКнопки = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), Родитель);
	КонецЕсли;
	ЭлементКнопки.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	ЭлементКнопки.ИмяКоманды = ИмяЭлемента;
	
	Возврат ЭлементКнопки;
	
КонецФункции


#КонецОбласти


#Область РаботаСДинамическимиСписками

// Добавить поле в запрос
//
// Параметры:
//  Список				 - ДинамическийСписок	 - Реквизит формы с типом динамического списка
//  ИмяИсточникаДанных	 - Строка				 - Имя источника данных, указываемого как псевдоним в блоке "ИЗ"
//  ИмяПоля				 - Строка				 - Имя реквизита данных
//  ПсевдонимПоля		 - Строка				 - Имя псевдонима реквизита
//
Процедура ДобавитьПолеВЗапрос(Список, ИмяИсточникаДанных, ИмяПоля, ПсевдонимПоля) Экспорт

	ДобавляемыйБлок = 
	"	" + ИмяИсточникаДанных + "." + ИмяПоля + " КАК " + ПсевдонимПоля; 
	ДобавитьБлокВЗапрос(Список, ИмяИсточникаДанных, ДобавляемыйБлок);
	
КонецПроцедуры 

// Добавить блок в запрос
//
// Параметры:
//  Список				 - ДинамическийСписок	 - Реквизит формы с типом динамического списка
//  ИмяИсточникаДанных	 - Строка				 - Имя источника данных, указываемого как псевдоним в блоке "ИЗ" 
//  ДобавляемыйБлок		 - Строка	 			 - Текст блока запроса 
//
Процедура ДобавитьБлокВЗапрос(Список, ИмяИсточникаДанных, ДобавляемыйБлок) Экспорт

	МодифицируемыйТекстЗапроса = Список.ТекстЗапроса; 
	
	ЕстьПрочиеПоля = СтрНайти(МодифицируемыйТекстЗапроса, "Ссылка,") > 0;
	Если ЕстьПрочиеПоля Тогда
		МодифицируемыйТекстЗапроса = СтрЗаменить(МодифицируемыйТекстЗапроса, ИмяИсточникаДанных + ".Ссылка КАК Ссылка,", 
		ИмяИсточникаДанных + ".Ссылка КАК Ссылка,
		|" + ДобавляемыйБлок + ",");
	Иначе
		МодифицируемыйТекстЗапроса = СтрЗаменить(МодифицируемыйТекстЗапроса, ".Ссылка КАК Ссылка", 
		".Ссылка КАК Ссылка,
		|" + ДобавляемыйБлок);
	КонецЕсли;  
	
	Список.ПроизвольныйЗапрос = Истина;
	Список.ТекстЗапроса = МодифицируемыйТекстЗапроса;

КонецПроцедуры

// Добавить элемент условия в запрос
//
// Параметры:
//  Список				 - ДинамическийСписок	 - Реквизит формы с типом динамического списка
//  ИмяИсточникаДанных	 - Строка				 - Имя источника данных, указываемого как псевдоним в блоке "ИЗ"
//  РеквизитУсловия		 - Строка				 - Реквизит, с которым выполняется сравнение
//  ВидСравнения		 - Строка				 - Оператор сравнения
//  ЗначениеСравнения	 - Строка				 - Значение сравнения
//
Процедура ДобавитьЭлементУсловияВЗапрос(Список, ИмяИсточникаДанных, РеквизитУсловия, ВидСравнения = "=", ЗначениеСравнения) Экспорт
	
	БлокУсловий = ИмяИсточникаДанных + "." + РеквизитУсловия + " " + ВидСравнения;
	Если ВидСравнения = "В" Тогда
		БлокУсловий = БлокУсловий 	+ " (" + ЗначениеСравнения + ")";	
	Иначе
		БлокУсловий = БлокУсловий	+ " " + ЗначениеСравнения;
	КонецЕсли;
	ДобавитьУсловиеВЗапрос(Список, ИмяИсточникаДанных, БлокУсловий);
		
КонецПроцедуры

// Добавить условие в запрос
//
// Параметры:
//  Список				 - ДинамическийСписок	 - Реквизит формы с типом динамического списка
//  ИмяИсточникаДанных	 - Строка				 - Имя источника данных, указываемого как псевдоним в блоке "ИЗ"
//  БлокУсловия			 - Строка				 - Текст условий
//
Процедура ДобавитьУсловиеВЗапрос(Список, ИмяИсточникаДанных, БлокУсловия) Экспорт

	МодифицируемыйТекстЗапроса = Список.ТекстЗапроса; 
	
	ЕстьБлокУсловий = СтрНайти(МодифицируемыйТекстЗапроса, "ГДЕ") > 0;
	Если ЕстьБлокУсловий Тогда
		МодифицируемыйТекстЗапроса = СтрЗаменить(МодифицируемыйТекстЗапроса, "ГДЕ", 
			"ГДЕ " + БлокУсловия + " И "); 
	Иначе
		МодифицируемыйТекстЗапроса = МодифицируемыйТекстЗапроса + 
			"
			|ГДЕ
			|	" + БлокУсловия;
	КонецЕсли;

	Список.ПроизвольныйЗапрос = Истина;
	Список.ТекстЗапроса = МодифицируемыйТекстЗапроса;
	
КонецПроцедуры 

#КонецОбласти

#Область Проверки


Функция ЭтоФормаДокумента(Форма) Экспорт
	Возврат Найти(Форма.ИмяФормы, "ФормаДокумента"); 	
КонецФункции

Функция ЭтоФормаСписка(Форма) Экспорт
	Возврат Найти(Форма.ИмяФормы, "ФормаСписка");	
КонецФункции

Функция ЭтоФормаЭлемента(Форма) Экспорт
	Возврат Найти(Форма.ИмяФормы, "ФормаЭлемента");	
КонецФункции

Функция ЭтоФормаГруппы(Форма) Экспорт
	Возврат Найти(Форма.ИмяФормы, "ФормаГруппы");
КонецФункции

Функция ЕстьРеквизитФормы(Форма, Имя) Экспорт
	
	МассивРеквизитовФормы = Форма.ПолучитьРеквизиты();
	Для Каждого ЭлементФормы Из МассивРеквизитовФормы Цикл
		Если ЭлементФормы.Имя = Имя Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоФормаВыбора(Форма) Экспорт
	Возврат Найти(Форма.ИмяФормы, "ФормаВыбора");	
КонецФункции


#КонецОбласти



#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТаблицуДанных(Форма, Имя, РеквизитОбъекта, ТаблицаДанных = Неопределено)

	Если ТаблицаДанных = Неопределено Тогда
		Попытка       
			ТабЧасть = ?(РеквизитОбъекта, Форма.Объект[Имя], Форма[Имя]);
			ТаблицаДанных = ТабЧасть.Выгрузить();
		Исключение
			ТаблицаДанных = Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ТаблицаДанных;
	
КонецФункции

#КонецОбласти

//ПРИМЕР Процедуры добавления реквизитов на форму:
//Процедура ДобавитьПолеКоличествоНаСкладеВТЧЗапасы(МассивНовыхРеквизитов)
//	Реквизит = Новый РеквизитФормы("ЛС_КоличествоНаСкладе", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой) ),"Объект.Запасы","Количество на складе", Ложь);
//	МассивНовыхРеквизитов.Добавить(Реквизит);
//КонецПроцедуры

//ПРИМЕР Добавления элементов на форму
//Если Найти(Форма.ИмяФормы, "Номенклатура.") И БЛС_Формы.ЭтоФормаСписка(Форма) Тогда
//	ТаблицаСписка = Форма.Элементы.Найти("СписокЗапасы");
//	ПолеКолонки = Форма.Элементы.Найти("ЕдиницаИзмерения");
//	ПутьКДанным = "СписокЗапасы.ЕстьСмежные";
//	ПолеНовойКолонки = БЛС_Формы.ВставитьПолеКолонкиТаблицы(Форма, ТаблицаСписка, "ЕстьСмежные", "Смежные", ПолеКолонки, ПутьКДанным);
//	ПолеНовойКолонки.Вид = ВидПоляФормы.ПолеФлажка;
//	
//	ПутьКДанным = "СписокЗапасы.Заведено";
//	ПолеНовойКолонки = БЛС_Формы.ВставитьПолеКолонкиТаблицы(УправляемаяФорма, ТаблицаСписка, "Заведено", "Заведено", , ПутьКДанным);
//КонецЕсли;

