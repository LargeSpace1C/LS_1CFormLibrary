/////////////////////////////////////////////////////////////////////////////////////////
//
// Библиотека отображения таблиц формы в виде блочной структуры.
// Зависит от БЛС_Формы
// Версия библиотеки 15.05.2023
//
//
//
/////////////////////////////////////////////////////////////////////////////////////////
// Пример реализации обработчиков и подключения библиотеки на форме
//
//#Область ОбработчикиСобытийФормы
//
//&НаСервере
//Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
//	БЛС_БлочныеТаблицыФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
//КонецПроцедуры
//
//#КонецОбласти
//
//
//#Область ОбработчикиКоманд
//
//&НаКлиенте
//Процедура БЛС_БлочныеТаблицыФормОбработчикКоманд(Команда)
//	БЛС_БлочныеТаблицыФормОбработчикКомандНаСервере(Команда.Имя);	
//КонецПроцедуры 
//
//&НаСервере
//Процедура БЛС_БлочныеТаблицыФормОбработчикКомандНаСервере(ИмяКоманды)
//	БЛС_БлочныеТаблицыФорм.ОбработкаКоманды(ЭтаФорма, Элементы.Найти(ИмяКоманды) );	
//КонецПроцедуры
//
//
//&НаКлиенте
//Процедура ПереключитьОтображение(Команда)
//	
//	ПереключитьОтображениеНаСервере("ТестоваяТаблица");	
//	
//КонецПроцедуры   
//
//&НаСервере
//Процедура ПереключитьОтображениеНаСервере(ИмяТаблицы)	
//	БЛС_БлочныеТаблицыФорм.ПереключитьОтображениеТаблицы(ЭтаФорма, ИмяТаблицы);	
//КонецПроцедуры
//
//#КонецОбласти

#Область ПрограммныйИнтерфейс	

#Область ОбработчикиФормы

// При создании на сервере
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения	 - Форма
//  Отказ				 - Булево	 - Флаг отказа от создания
//  СтандартнаяОбработка - Булево	 - Флаг стандартной обработки
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт

	Если НЕ ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;

	МассивНовыхРеквизитов = Новый Массив();
	СлужебнаяТаблицаБлоковДобавить(Форма, МассивНовыхРеквизитов);
	БЛС_БлочныеТаблицыФормПереопределяемый.ДобавитьРеквизиты(Форма, МассивНовыхРеквизитов);
	Форма.ИзменитьРеквизиты(МассивНовыхРеквизитов);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры  

// Обработка подключаемой команды
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - Форма 
//  Команда	 - КомандаФормы	 - Команда
//
Процедура ОбработкаКоманды(Форма, Команда) Экспорт
	
	Если Найти(Команда.Имя, "Добавить") Тогда
		КомандаДобавление(Форма, Команда);			
	ИначеЕсли Найти(Команда.Имя, "Удалить") Тогда
		КомандаУдаление(Форма, Команда);			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


// Переключить отображение таблицы
//
// Параметры:
//  Форма		 - ФормаКлиентскогоПриложения	 - Форма 
//  ИмяТаблицы	 - Строка	 - Имя таблицы, которую нужно перевести в блочный вид или в табличный
//
Процедура ПереключитьОтображениеТаблицы(Форма, ИмяТаблицы) Экспорт

	Элементы = Форма.Элементы;
	
	ТаблицаФормы = Элементы.Найти(ИмяТаблицы);
	Если ТаблицаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;   
	
	ГруппаФормы = Элементы.Найти(ИмяТаблицы + "Блоками");
	Если ГруппаФормы = Неопределено Тогда
		ГруппаФормы = БЛС_Формы.ВстГруппу(Форма, ТаблицаФормы.Родитель, ИмяТаблицы + "Блоками", "", ТаблицаФормы);
		ГруппаФормы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		КнопкаДобавитьБлок = БЛС_Формы.ДобКнопку(Форма, ГруппаФормы, ГруппаФормы.Имя + "Добавить", 
												 "+ добавить", "БЛС_БлочныеТаблицыФормОбработчикКоманд");
		КнопкаДобавитьБлок.Вид = ВидКнопкиФормы.Гиперссылка;  
		КнопкаДобавитьБлок.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	КонецЕсли;       
	
	ДанныеТаблицы = ?(Найти(ТаблицаФормы.ПутьКДанным, "Объект") > 0, Форма.Объект[ИмяТаблицы], Форма[ИмяТаблицы]);
	ТаблицаБлоков = Форма.БЛС_СлужебнаяТаблицаБлоков;
	
	ВБлочнуюФорму = ТаблицаФормы.Видимость;

	Если ВБлочнуюФорму Тогда     
		ГруппаФормы.Видимость = Истина;
		ТаблицаФормы.Видимость = Ложь;    
		Сворачивать = ДанныеТаблицы.Количество() > 1;
		Для Каждого СтрокаТЧ Из ДанныеТаблицы Цикл
			ДобавитьБлокСтрокиТаблицы(Форма, ТаблицаФормы, ГруппаФормы, СтрокаТЧ, Сворачивать);
		КонецЦикла;   
		
	Иначе                               
		
		СтрокиБлоков = ТаблицаБлоков.НайтиСтроки( Новый Структура("ИмяТаблицы", ИмяТаблицы) );
		Для Каждого СтрокаБлока Из СтрокиБлоков Цикл
			УдалитьБлокСтрокиТаблицы(Форма, ТаблицаБлоков, СтрокаБлока);
		КонецЦикла;
		
		ГруппаФормы.Видимость = Ложь;
		ТаблицаФормы.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры
	
// Добавить блок строки таблицы
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения	 - Форма 
//  ТаблицаФормы	 - ТаблицаФормы	 - Таблица
//  ГруппаФормы		 - ГруппаФормы	 - Группа для размещения блоков
//  СтрокаТаблицы	 - ДанныеФормыЭлементКоллекции	 - Строка таблицы
//  Свернутый		 - Булево	 - Сворачивать добавленный блок
//
Процедура ДобавитьБлокСтрокиТаблицы(Форма, ТаблицаФормы, ГруппаФормы, СтрокаТаблицы, Свернутый = Ложь) Экспорт

	Элементы = Форма.Элементы;
	
	ТаблицаБлоков = Форма.БЛС_СлужебнаяТаблицаБлоков;
	
	СтрокаТБ = ТаблицаБлоков.Добавить();
	СтрокаТБ.ИмяТаблицы = ТаблицаФормы.Имя;
	СтрокаТБ.НомерСтроки = СтрокаТаблицы.НомерСтроки;    
	НомерСтроки = Формат(СтрокаТБ.НомерСтроки, "ЧГ=0");
	ГруппаБлока = БЛС_Формы.ВстГруппу(Форма, ГруппаФормы, ГруппаФормы.Имя + "_Блок_" + НомерСтроки, 
									  "Строка №" + НомерСтроки, ГруппаФормы.Имя + "Добавить");
	ГруппаБлока.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;        
	ГруппаБлока.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	ГруппаБлока.ШрифтЗаголовка = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, 10);
	ГруппаБлока.ЗаголовокСвернутогоОтображения = "Строка №" + НомерСтроки;
	ГруппаБлока.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;
	Если Свернутый Тогда
		ГруппаБлока.Скрыть();  
	КонецЕсли;
	СтрокаТБ.ЭлементФормы = ГруппаБлока.Имя;
	
	ПараметрыЭлемента = Новый Структура("НомерСтроки,ИмяТаблицы,ПутьКДанным", 
										 СтрокаТБ.НомерСтроки, 
										 ТаблицаФормы.Имя, 
										 ТаблицаФормы.ПутьКДанным);
	
	КолонкаЛево = БЛС_Формы.ДобГруппу(Форма, ГруппаБлока, ГруппаБлока.Имя + "_ЛеваяКолонка");
	КолонкаЛево.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	КолонкаПраво = БЛС_Формы.ДобГруппу(Форма, ГруппаБлока, ГруппаБлока.Имя + "_ПраваяКолонка"); 
	КолонкаПраво.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	Для Каждого ЭлементФормы ИЗ ТаблицаФормы.ПодчиненныеЭлементы Цикл
		Если Найти(ЭлементФормы.Имя, "НомерСтроки") Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлементФормы.Видимость Тогда
			ДобавитьЭлементБлока(Форма, ПараметрыЭлемента, ЭлементФормы, КолонкаЛево);
		КонецЕсли;
	КонецЦикла;
	
	КнопкаУдаления = БЛС_Формы.ДобКнопку(Форма, КолонкаПраво, ГруппаБлока.Имя + "Удалить", 
										 "Удалить", "БЛС_БлочныеТаблицыФормОбработчикКоманд");
	КнопкаУдаления.Отображение = ОтображениеКнопки.Картинка;
	КнопкаУдаления.Картинка = БиблиотекаКартинок.Удалить;
		
	
КонецПроцедуры  

// Удалить блок строки таблицы
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения - Форма
//  ТаблицаБлоков	 - ТаблицаФормы	 - Таблица с блоками
//  СтрокаБлока		 - ДанныеФормыЭлементКоллекции	 - Строка блока
//
Процедура УдалитьБлокСтрокиТаблицы(Форма, ТаблицаБлоков, СтрокаБлока) Экспорт   
	
	ЭлементФормы = Форма.Элементы.Найти(СтрокаБлока.ЭлементФормы);
	ИмяКомандыУдаления = СтрокаБлока.ЭлементФормы + "Удалить";
	Команда = Форма.Команды.Найти(ИмяКомандыУдаления);
	Если Команда <> Неопределено Тогда
		Форма.Команды.Удалить(Команда);
	КонецЕсли;
	
	Форма.Элементы.Удалить(ЭлементФормы);
	ТаблицаБлоков.Удалить(СтрокаБлока);
	
КонецПроцедуры

#КонецОбласти     



#Область СлужебныеПроцедурыИФункции


Процедура КомандаДобавление(Форма, ЭлементКнопки)

	Элементы = Форма.Элементы;
	
	ГруппаФормы = ЭлементКнопки.Родитель;
	ИмяТаблицы = СтрЗаменить(ГруппаФормы.Имя, "Блоками", "");
	ТаблицаФормы = Элементы.Найти(ИмяТаблицы);
	Если ТаблицаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	ДанныеТаблицы = ?(Найти(ТаблицаФормы.ПутьКДанным, "Объект") > 0, Форма.Объект[ИмяТаблицы], Форма[ИмяТаблицы]);
	
	СтрокаТаблицы = ДанныеТаблицы.Добавить();
	ДобавитьБлокСтрокиТаблицы(Форма, ТаблицаФормы, ГруппаФормы, СтрокаТаблицы);	
	

КонецПроцедуры 

Процедура КомандаУдаление(Форма, ЭлементКнопки)

	Элементы = Форма.Элементы;
	
	ИмяБлока = СтрЗаменить(ЭлементКнопки.Имя, "Удалить", "");
	
	// TODO грамотное удаление блока
	ТаблицаБлоков = Форма.БЛС_СлужебнаяТаблицаБлоков;
	СтрокиТаблицы = ТаблицаБлоков.НайтиСтроки( Новый Структура("ЭлементФормы", ИмяБлока) );
	Если СтрокиТаблицы.Количество() = 0 Тогда
		ВызватьИсключение "Некорректно передан параметр блока";
	КонецЕсли; 
	
	НомерСтрокиТЧ = СтрокиТаблицы[0].НомерСтроки; 
	ИмяТаблицы = СтрокиТаблицы[0].ИмяТаблицы; 
	ТаблицаФормы = Элементы.Найти(ИмяТаблицы);
	ДанныеТаблицы = ?(Найти(ТаблицаФормы.ПутьКДанным, "Объект") > 0, Форма.Объект[ИмяТаблицы], Форма[ИмяТаблицы]);
	
	СтрокиДанных = ДанныеТаблицы.НайтиСтроки( Новый Структура("НомерСтроки", НомерСтрокиТЧ) );
	Для Каждого СтрокаДанных Из СтрокиДанных Цикл
		ДанныеТаблицы.Удалить(СтрокаДанных);
	КонецЦикла;
	
	СтрокиБлоков = ТаблицаБлоков.НайтиСтроки( Новый Структура("ИмяТаблицы", ИмяТаблицы) );
	Для Каждого СтрокаБлока Из СтрокиБлоков Цикл
		УдалитьБлокСтрокиТаблицы(Форма, ТаблицаБлоков, СтрокаБлока);
	КонецЦикла;  
	
	Сворачивать = ДанныеТаблицы.Количество() > 1;
		
	ГруппаФормы = Элементы.Найти(ИмяТаблицы + "Блоками");
	Для Каждого СтрокаТЧ Из ДанныеТаблицы Цикл
		ДобавитьБлокСтрокиТаблицы(Форма, ТаблицаФормы, ГруппаФормы, СтрокаТЧ, Сворачивать);
	КонецЦикла;

	

КонецПроцедуры

Процедура ДобавитьЭлементБлока(Форма, ПараметрыЭлемента, ЭлементТаблицы, ГруппаБлока)

	Если ТипЗнч(ЭлементТаблицы) = Тип("ПолеФормы") Тогда
		
		НомерСтроки = ПараметрыЭлемента.НомерСтроки;
		ИмяТаблицы = ПараметрыЭлемента.ИмяТаблицы;  
		ПутьКДанным = ПараметрыЭлемента.ПутьКДанным;
		
		ПутьКДаннымЭлемента = ПутьКДанным + "[" + Формат(НомерСтроки - 1, "ЧГ=0") +  "]" 
							+ СтрЗаменить(ЭлементТаблицы.ПутьКДанным, ПутьКДанным, "");
		Обработчик = "БЛС_БлочныеТаблицыПриИзменении";
		ЭлементБлока = БЛС_Формы.ДобПолеВвода(Форма, ГруппаБлока, ГруппаБлока.Имя + "_" 
					 	+ СтрЗаменить(ЭлементТаблицы.Имя, ИмяТаблицы, ""), 
					 ЭлементТаблицы.Заголовок, 
					 Ложь, 
					 ПутьКДаннымЭлемента, 
					 Обработчик); 
		БЛС_БлочныеТаблицыФормПереопределяемый.ДополнитьДобавленныйЭлементБлока(Форма, 
																				ЭлементБлока, 
																				ПараметрыЭлемента, 
																				ЭлементТаблицы, 
																				ГруппаБлока);
		
		
	ИначеЕсли ТипЗнч(ЭлементТаблицы) = Тип("ГруппаФормы") Тогда
		
		Для Каждого ЭлементКолонки Из ЭлементТаблицы.ПодчиненныеЭлементы Цикл
			Если ЭлементКолонки.Видимость Тогда
				ДобавитьЭлементБлока(Форма, ПараметрыЭлемента, ЭлементКолонки, ГруппаБлока);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура СлужебнаяТаблицаБлоковДобавить(Форма, МассивНовыхРеквизитов) 

	ТаблицаБлоков = Новый ТаблицаЗначений;
	ТаблицаБлоков.Колонки.Добавить("ИмяТаблицы");
	ТаблицаБлоков.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0) ) );
	ТаблицаБлоков.Колонки.Добавить("ЭлементФормы");
	
	БЛС_Формы.НовРеквТаблицаЗначений(Форма, МассивНовыхРеквизитов, ТаблицаБлоков, "БЛС_СлужебнаяТаблицаБлоков");
	
КонецПроцедуры

#КонецОбласти